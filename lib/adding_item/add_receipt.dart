// ignore_for_file: prefer_const_literals_to_create_immutables, prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:markaz_umaza_invoice_generator/datepickermenu/datepicker_menu.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_item_tile.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_menu_tile.dart';
import 'package:markaz_umaza_invoice_generator/extensions/context_extension.dart';
import 'package:markaz_umaza_invoice_generator/models/invoice.dart';
import 'package:markaz_umaza_invoice_generator/providers/app_data.dart';
import 'package:markaz_umaza_invoice_generator/tiles/dialog_tile.dart';
import 'package:markaz_umaza_invoice_generator/utils/margins.dart';

class AddReceipt extends ConsumerStatefulWidget {
  const AddReceipt({super.key});

  @override
  ConsumerState<AddReceipt> createState() => _AddReceiptState();
}

class _AddReceiptState extends ConsumerState<AddReceipt> {
// Form and Scroll
  final _formKey = GlobalKey<FormState>();

// Controllers
  final invoiceController = TextEditingController();
  final dateController = TextEditingController();
  final paidController = TextEditingController();

// Focus and Keys
  final paidFocus = FocusNode();
  late final globalKey = GlobalKey();

// Layer Links
  late final layerLink = LayerLink();

// UI State
  bool isLoading = false;
  bool isInvoiceSelected = false;
  double shadowHeight = 0;
  double menuHeight = 0;

// dropDown/Menu State
  late Invoice selectedInvoice;
  late double paid;

// Misc
  late AppData provider;
  DateTime now = DateTime.now();

// Validation
  final numTwoDecimalsRegex = RegExp(r'^\d+(\.\d{1,2})?$');
  final leadingZerosRegex = RegExp(r'^0+\d');

  @override
  void dispose() {
    dateController.dispose();
    invoiceController.dispose();
    paidController.dispose();
    super.dispose();
  }

  void loadCircle() {
    setState(() {
      isLoading = !isLoading;
    });
  }

  @override
  Widget build(BuildContext context) {
    provider = ref.watch(appData);

    return DialogTile(
      affirmButtonText: "Add",
      cancelButtonText: "Cancel",
      isLoading: isLoading,
      dialogHeight: 300,
      dialogTitle: "Add Receipt",
      onTapAffirm: () async {
        if (_formKey.currentState!.validate()) {
          loadCircle();
          if (context.mounted) {
            await provider.insertReceipt(
              context: context,
              receiptDate: dateController.text,
              invoiceId: selectedInvoice.invoiceId,
              paid: paidController.text.isNotEmpty
                  ? double.parse(paidController.text)
                  : selectedInvoice.total,
            );
          }

          loadCircle();

          if (context.mounted) {
            Navigator.pop(context);
          }
        }
      },
      onTapCancel: () {
        Navigator.pop(context);
      },
      dialogContent: Form(
        key: _formKey,
        child: SizedBox(
          width: 270,
          child: ListView(
            children: [
              Column(
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "* required fields\nauto - if left blank, autogenerated",
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                  Margins.vertical26,

                  //Receipt Date
                  SizedBox(
                    height: 65,
                    child: DatepickerMenu(
                      controller: dateController,
                      labelText: "Receipt Date (auto)",
                      isFocused: false,
                      onTap: () async {
                        DateTime? newDate = await showDatePicker(
                          context: context,
                          firstDate: DateTime(2000, 01, 01),
                          lastDate: DateTime(2100, 12, 31),
                        );

                        if (newDate == null) return;

                        setState(() {
                          dateController.text =
                              '${newDate.year}-${newDate.month}-${newDate.day}';
                        });
                      },
                      onTapDelete: () {
                        setState(() {
                          dateController.clear();
                        });
                      },
                    ),
                  ),
                  Margins.vertical14,

                  //Paid Field
                  SizedBox(
                    height: 65,
                    child: TextFormField(
                      keyboardType: const TextInputType.numberWithOptions(),
                      focusNode: paidFocus,
                      controller: paidController,
                      onTapOutside: (_) => paidFocus.unfocus(),
                      validator: (value) {
                        if (value != null &&
                            value.isNotEmpty &&
                            (!numTwoDecimalsRegex.hasMatch(value) ||
                                leadingZerosRegex.hasMatch(value))) {
                          return 'Invalid value';
                        }
                        return null;
                      },
                      decoration: const InputDecoration(
                        prefix: Text("\$"),
                        labelText:
                            "Paid (if blank, will equal the total invoice)",
                      ),
                    ),
                  ),
                  Margins.vertical14,

                  //Invoice dropDown
                  DropdownMenuTile(
                    layerLink: layerLink,
                    widgetKey: globalKey,
                    controller: invoiceController,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return "Please select Invoice";
                      }
                      return null;
                    },
                    textPadding: EdgeInsets.only(
                        top: 12, bottom: 12, right: 22, left: 10),
                    labelText: "Invoice*",
                    labelTextSize: 16,
                    isFocused: isInvoiceSelected,
                    onTap: () {
                      setState(() {
                        isInvoiceSelected = !isInvoiceSelected;
                      });

                      context.insertOverlay(
                        context: context,
                        widgetKey: globalKey,
                        layerLink: layerLink,
                        onTapOutsideOverlay: () {
                          setState(() {
                            isInvoiceSelected = !isInvoiceSelected;
                          });
                          context.removeOverlay();
                        },
                        itemCount: provider.invoices.length,
                        itemBuilder: (context, index) {
                          Invoice item = provider.invoices[index];

                          return DropDownItemTile(
                            mainAxisAlignment: MainAxisAlignment.start,
                            currentIndex: index,
                            itemFormat: [
                              Text(
                                  "Id: ${item.invoiceId},\nDate: ${item.invoiceDate},\nSender: ${item.senders.name},\nRecipient: ${item.recipients.name},\nTotal: ${item.total}")
                            ],
                            height: 100,
                            onTap: () {
                              selectedInvoice = item;
                              invoiceController.text =
                                  "#${item.invoiceId}, ${item.invoiceDate}, From: ${item.senders.name}, To: ${item.recipients.name}, Total: ${item.total}";
                              isInvoiceSelected = !isInvoiceSelected;

                              setState(() {});
                              context.removeOverlay();
                            },
                          );
                        },
                      );
                    },
                  ),
                  Margins.vertical18,
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
