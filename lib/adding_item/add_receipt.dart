// ignore_for_file: prefer_const_literals_to_create_immutables, prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:markaz_umaza_invoice_generator/datepickermenu/datepicker_menu.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_item_tile.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_menu_tile.dart';
import 'package:markaz_umaza_invoice_generator/extensions/context_extension.dart';
import 'package:markaz_umaza_invoice_generator/models/invoice.dart';
import 'package:markaz_umaza_invoice_generator/models/invoice_course.dart';
import 'package:markaz_umaza_invoice_generator/providers/app_data.dart';
import 'package:markaz_umaza_invoice_generator/tiles/dialog_tile.dart';
import 'package:markaz_umaza_invoice_generator/widgets/tile_row.dart';

class AddReceipt extends ConsumerStatefulWidget {
  const AddReceipt({super.key});

  @override
  ConsumerState<AddReceipt> createState() => _AddReceiptState();
}

class _AddReceiptState extends ConsumerState<AddReceipt> {
// Form and Scroll
  final _formKey = GlobalKey<FormState>();
  late ScrollPhysics scrollPhysics = AlwaysScrollableScrollPhysics();

// Controllers
  late final Map<String, TextEditingController> controllers = {
    'invoice': TextEditingController(),
    'date': TextEditingController(),
    'paid': TextEditingController(),
  };

// Focus and Keys
  final paidFocus = FocusNode();
  late final globalKey = GlobalKey();

// Layer Links
  late final layerLink = LayerLink();

// UI State
  bool isLoading = false;
  bool isInvoiceFocused = false;
  double shadowHeight = 0;
  double menuHeight = 0;

// dropDown/Menu State
  late Invoice selectedInvoice;
  late double paid;

// Misc
  late AppData provider;
  DateTime now = DateTime.now();

// Validation
  final numTwoDecimalsRegex = RegExp(r'^\d+(\.\d{1,2})?$');
  final leadingZerosRegex = RegExp(r'^0+\d');

  String getCourseString(List<InvoiceCourse> courses) {
    String courseString = '';

    for (int i = 0; i < courses.length; i++) {
      if (i == 0) {
        courseString += courses[i].courses.name;
        continue;
      }

      courseString += "\n${courses[i].courses.name}";
    }

    return courseString;
  }

  @override
  void dispose() {
    for (TextEditingController e in controllers.values) {
      e.dispose();
    }
    super.dispose();
  }

  void loadCircle() {
    setState(() {
      isLoading = !isLoading;
    });
  }

  @override
  Widget build(BuildContext context) {
    provider = ref.watch(appData);

    return DialogTile(
      affirmButtonText: "Add",
      cancelButtonText: "Cancel",
      isLoading: isLoading,
      dialogHeight: 300,
      dialogTitle: "Add Receipt",
      onTapAffirm: () async {
        if (_formKey.currentState!.validate()) {
          loadCircle();
          if (context.mounted) {
            await provider.insertReceipt(
              context: context,
              receiptDate: controllers['date']!.text,
              invoiceId: selectedInvoice.invoiceId,
              paid: controllers['paid']!.text.isNotEmpty
                  ? double.parse(controllers['paid']!.text)
                  : selectedInvoice.total,
            );
          }

          loadCircle();

          if (context.mounted) {
            Navigator.pop(context);
          }
        }
      },
      onTapCancel: () {
        Navigator.pop(context);
      },
      dialogContent: Form(
        key: _formKey,
        child: SizedBox(
          width: 270,
          child: ListView(
            physics: scrollPhysics,
            children: [
              Column(
                spacing: 18,
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "* required fields\nauto - if left blank, autogenerated",
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                  SizedBox(),

                  //Receipt Date
                  SizedBox(
                    height: 65,
                    child: DatepickerMenu(
                      controller: controllers['date']!,
                      labelText: "Receipt Date (auto)",
                      isFocused: false,
                      onTap: () async {
                        DateTime? newDate = await showDatePicker(
                          context: context,
                          firstDate: DateTime(2000, 01, 01),
                          lastDate: DateTime(2100, 12, 31),
                        );

                        if (newDate == null) return;

                        setState(() {
                          controllers['date']!.text =
                              '${newDate.year}-${newDate.month}-${newDate.day}';
                        });
                      },
                      onTapDelete: () {
                        setState(() {
                          controllers['date']!.clear();
                        });
                      },
                    ),
                  ),

                  //Paid Field
                  SizedBox(
                    height: 65,
                    child: TextFormField(
                      keyboardType: const TextInputType.numberWithOptions(),
                      focusNode: paidFocus,
                      controller: controllers['paid']!,
                      onTapOutside: (_) => paidFocus.unfocus(),
                      validator: (value) {
                        if (value != null &&
                            value.isNotEmpty &&
                            (!numTwoDecimalsRegex.hasMatch(value) ||
                                leadingZerosRegex.hasMatch(value))) {
                          return 'Invalid value';
                        }
                        return null;
                      },
                      decoration: const InputDecoration(
                        prefix: Text("\$"),
                        labelText:
                            "Paid (if blank, will equal the total invoice)",
                      ),
                    ),
                  ),

                  //Invoice dropDown
                  DropdownMenuTile(
                    layerLink: layerLink,
                    widgetKey: globalKey,
                    controller: controllers['invoice']!,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return "Please select Invoice";
                      }
                      return null;
                    },
                    textPadding: EdgeInsets.only(
                        top: 12, bottom: 12, right: 22, left: 10),
                    labelText: "Invoice*",
                    labelTextSize: 16,
                    isFocused: isInvoiceFocused,
                    onTap: () {
                      isInvoiceFocused = !isInvoiceFocused;
                      scrollPhysics = NeverScrollableScrollPhysics();
                      setState(() {});

                      context.insertOverlay(
                        context: context,
                        widgetKey: globalKey,
                        layerLink: layerLink,
                        onTapOutsideOverlay: () {
                          isInvoiceFocused = !isInvoiceFocused;
                          scrollPhysics = AlwaysScrollableScrollPhysics();
                          setState(() {});
                          context.removeOverlay();
                        },
                        itemCount: provider.invoices.length,
                        itemBuilder: (context, index) {
                          Invoice item =
                              provider.invoices.reversed.toList()[index];

                          return DropDownItemTile(
                            currentIndex: index,
                            padding: EdgeInsets.symmetric(
                                vertical: 10, horizontal: 8),
                            itemFormat: Column(
                              children: [
                                Text("Invoice ${item.invoiceId}:",
                                    style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 14)),
                                TileRow(
                                  "Date: ",
                                  item.invoiceDate,
                                  fontSize: 13,
                                  //    mainAxisAlignment: MainAxisAlignment.center,
                                ),
                                TileRow(
                                  "Sender: ",
                                  item.senders.name,
                                  fontSize: 13,
                                  //  mainAxisAlignment: MainAxisAlignment.center,
                                ),
                                TileRow(
                                  "Recipient: ",
                                  item.recipients.name,
                                  fontSize: 13,
                                  // mainAxisAlignment: MainAxisAlignment.center,
                                ),
                                Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text("Courses: ",
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontSize: 13)),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          for (InvoiceCourse course
                                              in item.invoiceCourses!) ...[
                                            Text(
                                              course.courses.name,
                                              style: TextStyle(fontSize: 11),
                                              overflow: TextOverflow.ellipsis,
                                            )
                                          ]
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                            //  Text("Id: ${item.invoiceId},\nDate: ${item.invoiceDate},\nSender: ${item.senders.name},\nRecipient: ${item.recipients.name},\nTotal: ${item.total}"),
                            onTap: () {
                              selectedInvoice = item;
                              controllers['invoice']!.text =
                                  "${item.invoiceId}, ${item.invoiceDate}, ${item.senders.name}, ${item.recipients.name}, ${item.total}";
                              isInvoiceFocused = !isInvoiceFocused;
                              scrollPhysics = AlwaysScrollableScrollPhysics();
                              setState(() {});
                              context.removeOverlay();
                            },
                          );
                        },
                      );
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
