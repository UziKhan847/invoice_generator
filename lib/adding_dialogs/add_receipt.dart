// ignore_for_file: prefer_const_literals_to_create_immutables, prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:markaz_umaza_invoice_generator/datepickermenu/datepicker_menu.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_item_tile.dart';
import 'package:markaz_umaza_invoice_generator/dropdownmenu/dropdown_menu_tile.dart';
import 'package:markaz_umaza_invoice_generator/extensions/context_extension.dart';
import 'package:markaz_umaza_invoice_generator/main.dart';
import 'package:markaz_umaza_invoice_generator/models/invoice.dart';
import 'package:markaz_umaza_invoice_generator/providers/app_data.dart';
import 'package:markaz_umaza_invoice_generator/tiles/add_dialog_tile.dart';
import 'package:markaz_umaza_invoice_generator/utils/margins.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class AddReceipt extends ConsumerStatefulWidget {
  const AddReceipt({super.key});

  @override
  ConsumerState<AddReceipt> createState() => _AddReceiptState();
}

class _AddReceiptState extends ConsumerState<AddReceipt> {
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;

  final invoiceController = TextEditingController();
  final dateController = TextEditingController();
  final paidController = TextEditingController();

  final paidFocus = FocusNode();

  bool isInvoiceSelected = false;

  late Invoice selectedInvoice;
  late double paid;

  double shadowHeight = 0;
  double menuHeight = 0;

  late AppData provider;
  DateTime now = DateTime.now();

  final moneyRegex = RegExp(r'^\d+(\.\d{1,2})?$');
  final moneyZeroRegex = RegExp(r'^0+\d');

  @override
  void dispose() {
    dateController.dispose();
    invoiceController.dispose();
    paidController.dispose();
    super.dispose();
  }

  void loadCircle() {
    setState(() {
      isLoading = !isLoading;
    });
  }

  @override
  Widget build(BuildContext context) {
    provider = ref.watch(appData);

    return AddDialogTile(
      isLoading: isLoading,
      dialogTitle: "Add Receipt",
      onTapAdd: () async {
        if (_formKey.currentState!.validate()) {
          loadCircle();
          if (context.mounted) {
            await provider.insertReceipt(
              context: context,
              receiptDate: dateController.text,
              senderId: selectedInvoice.senderId,
              recipientId: selectedInvoice.recipientId,
              invoiceId: selectedInvoice.invoiceId,
              paid: paidController.text.isNotEmpty
                  ? double.parse(paidController.text)
                  : selectedInvoice.total,
            );
          }

          loadCircle();

          if (context.mounted) {
            Navigator.pop(context);
          }
        }
      },
      onTapCancel: () {
        Navigator.pop(context);
      },
      dialogContent: SizedBox(
        height: 300,
        child: Form(
          key: _formKey,
          child: SizedBox(
            width: 270,
            child: ListView(
              children: [
                Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        Text(
                          "* required fields\nauto - if left blank, autogenerated",
                          style: TextStyle(color: Colors.grey.shade600),
                        ),
                      ],
                    ),
                    Margins.vertical26,

                    //Receipt Date
                    SizedBox(
                      height: 65,
                      child: DatepickerMenu(
                        controller: dateController,
                        labelText: "Receipt Date (auto)",
                        isSelected: false,
                        menuInkHeight: 46,
                        menuInkWidth: 155,
                        menuBoxWidth: 155,
                        iconRightPosition: 8,
                        iconTopPosition: 10,
                        onTapMenuBox: () async {
                          DateTime? newDate = await showDatePicker(
                            context: context,
                            firstDate: DateTime(2000, 01, 01),
                            lastDate: DateTime(2100, 12, 31),
                          );

                          if (newDate == null) return;

                          setState(() {
                            dateController.text =
                                '${newDate.year}-${newDate.month}-${newDate.day}';
                          });
                        },
                        onTapDelete: () {
                          setState(() {
                            dateController.clear();
                          });
                        },
                      ),
                    ),
                    Margins.vertical14,

                    //Paid Field
                    SizedBox(
                      height: 65,
                      child: TextFormField(
                        keyboardType: const TextInputType.numberWithOptions(),
                        focusNode: paidFocus,
                        controller: paidController,
                        onTapOutside: (_) => paidFocus.unfocus(),
                        validator: (value) {
                          if (value != null &&
                              value.isNotEmpty &&
                              (!moneyRegex.hasMatch(value) ||
                                  moneyZeroRegex.hasMatch(value))) {
                            return 'Invalid value';
                          }
                          return null;
                        },
                        decoration: const InputDecoration(
                          prefix: Text("\$"),
                          labelText:
                              "Paid (if blank, will equal the total invoice)",
                        ),
                      ),
                    ),
                    Margins.vertical14,

                    //Invoice DropDown
                    DropdownMenuTile(
                      controller: invoiceController,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please select Invoice";
                        }
                        return null;
                      },
                      textPadding: EdgeInsets.only(
                          top: 12, bottom: 12, right: 22, left: 10),
                      labelText: "Invoice*",
                      labelTextSize: 16,
                      isSelected: isInvoiceSelected,
                      arrowRightPosition: 2,
                      arrowTopPosition: 12,
                      menuInkHeight: 47,
                      onTapMenuBox: () {
                        setState(() {
                          isInvoiceSelected = !isInvoiceSelected;
                        });

                        context.insertOverlay(
                          context,
                          height: 200,
                          width: 260,
                          bottom: 200,
                          right: 50,
                          onTapOutsideOverlay: () {
                            setState(() {
                              isInvoiceSelected = !isInvoiceSelected;
                            });
                            context.removeOverlay();
                          },
                          listViewBuilder: ListView.builder(
                              padding: const EdgeInsets.all(0),
                              itemCount: provider.invoices.length,
                              itemBuilder: (context, index) {
                                Invoice item = provider.invoices[index];

                                return DropdownItemTile(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  currentMenuIndex: index,
                                  itemText:
                                      "Id: ${item.invoiceId},\nDate: ${item.invoiceDate},\nSender: ${item.senders!.name},\nRecipient: ${item.recipients!.name},\nTotal: ${item.total}",
                                  lastItemIndex: provider.invoices.length - 1,
                                  menuItemHeight: 100,
                                  onItemTap: () {
                                    selectedInvoice = item;
                                    invoiceController.text =
                                        "#${item.invoiceId}, ${item.invoiceDate}, From: ${item.senders!.name}, To: ${item.recipients!.name}, Total: ${item.total}";
                                    isInvoiceSelected = !isInvoiceSelected;

                                    setState(() {});
                                    context.removeOverlay();
                                  },
                                );
                              }),
                        );
                      },
                    ),
                    Margins.vertical18,
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
